
# Huge inspiration from: https://www.youtube.com/watch?v=ud7YxC33Z3w

## Path
export PATH=$PATH:"/home/$USER/.local/bin/"

# Pyenv
export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"


## Env Vars
export EDITOR="nvim"


## Zinit
# Set the directory we want to store zinit and plugins
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"

# Download Zinit, if it's not there yet
if [ ! -d "$ZINIT_HOME" ]; then
   mkdir -p "$(dirname $ZINIT_HOME)"
   git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

# Source/Load zinit
source "${ZINIT_HOME}/zinit.zsh"


## Plugins
# Syntax Highlighting
zinit light zsh-users/zsh-syntax-highlighting

# Completion and Auto-Suggestions
zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-autosuggestions

# Add in snippets
# zinit snippet OMZP::_adb     # Can't download
zinit snippet OMZP::aliases
zinit snippet OMZP::ansible
# zinit snippet OMZP::asdf
zinit snippet OMZP::aws
zinit snippet OMZP::azure
zinit snippet OMZP::colorize
zinit snippet OMZP::command-not-found
zinit snippet OMZP::cp
zinit snippet OMZP::docker     # Throws an error
# zinit snippet OMZP::fzf      # Use this instead of my manual config, if problems with autocompletion arise
zinit snippet OMZP::git
# zinit snippet OMZP::helm     # Throws an error
# zinit snippet OMZP::kubectl  # Completions don't work
# zinit snippet OMZP::kubectx  # Not sure I need it
zinit snippet OMZP::pip
zinit snippet OMZP::ssh
zinit snippet OMZP::sudo
# zinit snippet OMZP::vi-mode

# Fix docker completions folder not existing
mkdir -p "$ZSH_CACHE_DIR/completions"

# Load completions
autoload -Uz compinit && compinit
zinit cdreplay -q

# Kubectl autocomplete
[[ $commands[kubectl] ]] && source <(kubectl completion zsh)

## History
HISTSIZE=5000
SAVEHIST=$HISTSIZE
HISTFILE=~/.zsh_history
HISTDUP=erase
setopt histignorealldups hist_ignore_all_dups   # Don't keep duplicate commands in history
setopt sharehistory                             # Share history in real time between different sessions
setopt appendhistory                            # Append instead of overwriting history file
setopt hist_ignore_space                        # Don't store commands that start with a space (for sensitive information)
setopt hist_find_no_dups                        # Don't show dupe commands in search


## Keybindings
bindkey -e
bindkey '^p' history-search-backward
bindkey '^n' history-search-forward

# Ctrl + Arrows skip words
bindkey ";5C" forward-word
bindkey ";5D" backward-word


## Aliases
# alias ls='ls --color'
alias ls='eza --git --group -a'
alias ll='ls -la'
alias vim='nvim'
alias c='clear'
alias tmux='tmux -u'
alias less='less -r'
alias grep='grep --color=always'
alias rand="curl 'https://www.random.org/integers/?num=1&min=0&max=1&col=1&base=10&format=plain&rnd=new'"
if ! command -v docker &> /dev/null; then; alias docker=podman; fi


## Shell integrations
# FZF
# export FZF_DEFAULT_OPTS="--ansi --preview-window 'right:60%' --preview 'bat --color=always --style=header,grid --line-range :300 {}'"
zinit light Aloxaf/fzf-tab
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
eval "$(fzf --zsh)"

# Kill Completions
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# Completion case-insensitive
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'

# Completion Colors(?)
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"

# Don't show previews for:
# zstyle ':completion:*' menu no
# zstyle ':fzf-tab:complete:git:*' menu no
# zstyle ':fzf-tab:complete:docker:*' menu no
# zstyle ':fzf-tab:complete:kubectl:*' menu no

# Show previews for all files and directories on all commands
zstyle ':fzf-tab:complete:*:*' fzf-preview 'zsh -c "if [ -e $realpath -a -d $realpath ]; then ls --color $realpath -a; fi; if [ -e $realpath -a -f $realpath ]; then bat --color=always --style=header,grid --line-range :300 $realpath; fi"'


# zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls --color $realpath -a'
# zstyle ':fzf-tab:complete:cd:*' fzf-preview 'zsh -c "if [ -d $realpath ]; then ls --color $realpath -a; fi; if [ -f $realpath ]; then bat --color=always --style=header,grid --line-range :300 $realpath; fi"'
# zstyle ':fzf-tab:complete:cat:*' fzf-preview 'zsh -c "if [ -d $realpath ]; then ls --color $realpath -a; fi; if [ -f $realpath ]; then bat --color=always --style=header,grid --line-range :300 $realpath; fi"'
# zstyle ':fzf-tab:complete:ls:*' fzf-preview 'ls --color $realpath -a'
# zstyle ':fzf-tab:complete:cat:*' fzf-preview 'bat --color=always --style=header,grid --line-range :300 $realpath'
# zstyle ':fzf-tab:complete:__zoxide_z:*' fzf-preview 'ls --color $realpath -a'

# Zoxide
eval "$(zoxide init --cmd cd zsh)"


# Prompt (Starship)
eval "$(starship init zsh)"


## Automations
autoload -U add-zsh-hook

# Automatically activate venvs
python_venv() {
  MYVENV=./venv
  # When you cd into a folder that contains venv
  [[ -d $MYVENV ]] && source $MYVENV/bin/activate > /dev/null 2>&1 && return 0

  MYVENV=./.venv
  # When you cd into a folder that contains .venv
  [[ -d $MYVENV ]] && source $MYVENV/bin/activate > /dev/null 2>&1

  # # when you cd into a folder that doesn't
  # [[ ! -d $MYVENV ]] && deactivate > /dev/null 2>&1
}
add-zsh-hook chpwd python_venv

# Custom completions
source "${XDG_DATA_HOME:-${HOME}}/.config/zsh_completions/pulumi"

# Automatically export .env files
dot_env() {
  DOTFILE=.env
  # when you cd into a folder that contains ".env" file
  [[ -f $DOTFILE ]] && export $(grep -v '^#' $DOTFILE | xargs)
}
add-zsh-hook chpwd dot_env

# Set up the prompt

# autoload -Uz promptinit
# promptinit
# prompt adam1

# Use modern completion system
# autoload -Uz compinit
# compinit
#
# zstyle ':completion:*' auto-description 'specify: %d'
# zstyle ':completion:*' completer _expand _complete _correct _approximate
# zstyle ':completion:*' format 'Completing %d'
# zstyle ':completion:*' group-name ''
# zstyle ':completion:*' menu select=2
# eval "$(dircolors -b)"
# zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
# zstyle ':completion:*' list-colors ''
# zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
# zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
# zstyle ':completion:*' menu select=long
# zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
# zstyle ':completion:*' use-compctl false
# zstyle ':completion:*' verbose true

# Temp for Claude code testing
export DISABLE_PROMPT_CACHING=1
export AWS_SDK_LOAD_CONFIG=1
export AWS_PROFILE=OktaCore
export AWS_REGION=us-east-1
export CLAUDE_CODE_USE_BEDROCK=1
# export ANTHROPIC_MODEL='us.anthropic.claude-opus-4-1-20250805-v1:0'

# Fix for ansible
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8

# add Pulumi to the PATH
export PATH=$PATH:/home/noam/.pulumi/bin
